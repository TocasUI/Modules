// Generated by CoffeeScript 2.0.0-beta2
var TocasEmbed;

TocasEmbed = (function() {
  class TocasEmbed {
    $init({$this, $data, $module}) {
      var $icon, $placeholder, icon, id, options, parameters, placeholder, ref, source, thumbnailURL, url;
      source = $this.attr('data-source');
      url = $this.attr('data-url');
      id = $this.attr('data-id');
      placeholder = $this.attr('data-placeholder');
      options = $this.attr('data-options') || '';
      parameters = $this.attr('data-parameters') || '';
      icon = $this.attr('data-icon') || 'video play';
      if ($this.data('source')) {
        return;
      }
      if (parameters !== '') {
        parameters = `?${parameters}`;
      }
      if (placeholder && placeholder !== 'auto') {
        $placeholder = $selector('<img>').prop('src', placeholder).addClass('placeholder');
        $placeholder.appendTo($this);
      } else if (placeholder !== null) {
        thumbnailURL = (ref = $data.sources[source]) != null ? ref.thumbnail(id) : void 0;
        $placeholder = $selector('<img>').prop('src', thumbnailURL).addClass('placeholder');
        if (thumbnailURL != null) {
          $placeholder.appendTo($this);
        }
      }
      if (icon && (source || url || id)) {
        $icon = $selector('<i>');
        $icon.addClass(`${icon} icon`);
        $icon.on('click', function() {
          var $iframe, $video, ref1;
          if ($module.prototype._isVideo(url)) {
            $video = $selector('<video>').prop('src', url);
            if (options !== '') {
              $module.prototype._parseKeyValues(options, function(key, value) {
                return $video.attr(key, value);
              });
            }
            return $this.addClass('active').append($video.get());
          } else {
            $iframe = $selector('<iframe>').prop({
              width: '100%',
              height: '100%',
              frameborder: '0',
              scrolling: 'no'
            }).attr({
              webkitAllowFullScreen: '',
              mozallowfullscreen: '',
              allowFullScreen: ''
            });
            if (source) {
              $iframe.prop('src', $module.prototype._parseURL((ref1 = $data.sources[source]) != null ? ref1.url : void 0, id, parameters));
            } else if (url) {
              $iframe.prop('src', `${url}${parameters}`);
            }
            return $this.addClass('active').append($iframe.get());
          }
        });
      }
      $icon.appendTo($this);
      return $this.data('source', source);
    }

    _parseURL(sourceURL, id, parameters) {
      return sourceURL.replace('{id}', id).replace('{parameters}', parameters);
    }

    _parseKeyValues(keyValues, each) {
      var object;
      if (typeof keyValues === 'object') {
        return keyValues;
      }
      object = {};
      keyValues.split(',').forEach(function(pair) {
        var key, value;
        pair = pair.split('=');
        key = pair[0].trim();
        value = pair[1] || '';
        object[key] = value.trim();
        if (each != null) {
          return each(key, value);
        }
      });
      return object;
    }

    _isVideo(url) {
      var extension;
      extension = url ? url.split('.').pop() : '';
      extension = extension.toUpperCase();
      return extension.indexOf('MOV') !== -1 || extension.indexOf('MP4') !== -1 || extension.indexOf('WEBM') !== -1 || extension.indexOf('OGG') !== -1;
    }

    $opts() {}

  };

  TocasEmbed.prototype.$name = 'embed';

  TocasEmbed.prototype.$data = {
    sources: {
      youtube: {
        url: 'https://www.youtube.com/embed/{id}{parameters}',
        icon: 'youtube',
        thumbnail: function(id) {
          return `https://i.ytimg.com/vi/${id}/maxresdefault.jpg`;
        }
      },
      viemo: {
        url: 'https://player.vimeo.com/video/{id}{parameters}',
        icon: 'viemo',
        thumbnail: function(id) {
          return `https://i.vimeocdn.com/video/${id}_720.jpg`;
        }
      },
      dailymotion: {
        url: 'https://www.dailymotion.com/embed/video/{id}{parameters}',
        icon: 'video play',
        thumbnail: function(id) {
          return `https://www.dailymotion.com/thumbnail/video/${id}`;
        }
      }
    }
  };

  TocasEmbed.prototype.$options = {
    id: '',
    icon: '',
    source: '',
    url: '',
    parameters: '',
    onDisplay: function() {},
    onCreate: function() {}
  };

  TocasEmbed.prototype.$method = {
    change: function() {},
    reset: function() {},
    show: function() {},
    hide: function() {},
    'get id': function() {},
    'get placeholder': function() {},
    'add source': function() {},
    'get source': function() {},
    'get type': function() {},
    'get url': function() {},
    'has placeholder': function() {}
  };

  return TocasEmbed;

})();

new ts(TocasEmbed);
